import SourceTokenListIndex from 'coffee-lex/dist/SourceTokenListIndex';
import SharedBlockPatcher from '../../../patchers/SharedBlockPatcher';
import { PatchOptions } from '../../../patchers/types';
import NodePatcher from './../../../patchers/SharedBlockPatcher';
import ForPatcher from './ForPatcher';
export default class BlockPatcher extends SharedBlockPatcher {
    statements: Array<NodePatcher>;
    _forPatcherDescendants: Array<ForPatcher>;
    _explicitDeclarationsToAdd: Array<string>;
    /**
     * Called by initialize within child ForPatchers, so this array will be
     * available in our initialize method.
     */
    markForPatcherDescendant(forPatcher: ForPatcher): void;
    /**
     * In some cases, loops assign to variables, but will be turned into IIFEs,
     * moving the variable scope into the IIFE. This can cause incorrect behavior
     * if the variable is used outside the loop body, so we want to explicitly
     * declare the variable at the top of the block in that case.
     */
    initialize(): void;
    canPatchAsExpression(): boolean;
    prefersToPatchAsExpression(): boolean;
    setExpression(force?: boolean): boolean;
    setImplicitlyReturns(): void;
    /**
     * Force the patcher to treat the block as inline (semicolon-separated
     * statements) or not (newline-separated statements).
     */
    setShouldPatchInline(shouldPatchInline: boolean): void;
    patchAsStatement({leftBrace, rightBrace}?: PatchOptions): void;
    patchInnerStatement(statement: NodePatcher): void;
    /**
     * Remove an unnecessary empty return at the end of a function. Ideally, we
     * want to remove the whole line, but that's only safe if the `return` is on a
     * line by itself. Otherwise, there might be bugs like code being pulled into
     * a comment on the previous line.
     */
    removeFinalEmptyReturn(statement: NodePatcher): void;
    patchAsExpression({leftBrace, rightBrace}?: PatchOptions): void;
    /**
     * @private
     */
    getSemicolonSourceTokenIndexBetween(left: NodePatcher, right: NodePatcher): SourceTokenListIndex | null;
    /**
     * Blocks only exit via the last statement, so we check its code paths.
     */
    allCodePathsPresent(): boolean;
}
