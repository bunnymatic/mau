"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var BinaryOpPatcher_1 = require("./BinaryOpPatcher");
/**
 * Handles `instanceof` operator, e.g. `a instanceof b`.
 */
var NegatableBinaryOpPatcher = (function (_super) {
    tslib_1.__extends(NegatableBinaryOpPatcher, _super);
    function NegatableBinaryOpPatcher(patcherContext, left, right) {
        var _this = _super.call(this, patcherContext, left, right) || this;
        _this.negated = patcherContext.node.isNot;
        return _this;
    }
    NegatableBinaryOpPatcher.prototype.negate = function () {
        this.negated = !this.negated;
    };
    NegatableBinaryOpPatcher.prototype.javaScriptOperator = function () {
        throw new Error("'javaScriptOperator' should be implemented in subclass");
    };
    /**
     * LEFT 'not'? OP RIGHT
     */
    NegatableBinaryOpPatcher.prototype.patchAsExpression = function () {
        var negated = this.negated;
        if (negated) {
            // `a not instanceof b` → `!(a not instanceof b`
            //                         ^^
            this.insert(this.innerStart, '!(');
        }
        // Patch LEFT and RIGHT.
        _super.prototype.patchAsExpression.call(this);
        if (negated) {
            // `!(a not instanceof b` → `!(a not instanceof b)`
            //                                               ^
            this.insert(this.innerEnd, ')');
        }
        // `!(a not instanceof b)` → `!(a instanceof b)`
        //      ^^^^^^^^^^^^^^            ^^^^^^^^^^
        var token = this.getOperatorToken();
        this.overwrite(token.start, token.end, this.javaScriptOperator());
    };
    /**
     * It may be wrapped due to negation, so don't double-wrap.
     */
    NegatableBinaryOpPatcher.prototype.statementNeedsParens = function () {
        if (this.negated) {
            return false;
        }
        else {
            return _super.prototype.statementNeedsParens.call(this);
        }
    };
    return NegatableBinaryOpPatcher;
}(BinaryOpPatcher_1.default));
exports.default = NegatableBinaryOpPatcher;
