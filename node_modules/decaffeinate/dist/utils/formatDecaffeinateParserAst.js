"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var formatRange_1 = require("./formatRange");
function formatDecaffeinateParserAst(context) {
    var resultLines = formatAstNodeLines(context.programNode, context);
    return resultLines.map(function (line) { return line + '\n'; }).join('');
}
exports.default = formatDecaffeinateParserAst;
function formatAstNodeLines(node, context) {
    var propLines = [];
    var childPropNames = node.getChildNames();
    var blacklistedProps = childPropNames.concat(['raw', 'line', 'column', 'type', 'parentNode', 'context', 'start', 'end']);
    try {
        for (var _a = tslib_1.__values(Object.keys(node)), _b = _a.next(); !_b.done; _b = _a.next()) {
            var key = _b.value;
            if (blacklistedProps.indexOf(key) !== -1) {
                continue;
            }
            var valueText = void 0;
            try {
                valueText = JSON.stringify(node[key]);
            }
            catch (e) {
                valueText = '(error)';
            }
            propLines.push(key + ": " + valueText);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
        }
        finally { if (e_1) throw e_1.error; }
    }
    try {
        for (var childPropNames_1 = tslib_1.__values(childPropNames), childPropNames_1_1 = childPropNames_1.next(); !childPropNames_1_1.done; childPropNames_1_1 = childPropNames_1.next()) {
            var childProp = childPropNames_1_1.value;
            var value = node[childProp];
            if (value === null) {
                propLines.push(childProp + ": null");
            }
            else if (Array.isArray(value) && value.length === 0) {
                propLines.push(childProp + ": []");
            }
            else if (Array.isArray(value)) {
                propLines.push(childProp + ": [");
                try {
                    for (var value_1 = tslib_1.__values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                        var child = value_1_1.value;
                        propLines.push.apply(propLines, tslib_1.__spread(formatAstNodeLines(child, context).map(function (s) { return '  ' + s; })));
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (value_1_1 && !value_1_1.done && (_d = value_1.return)) _d.call(value_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                propLines.push("]");
            }
            else {
                var childLines = formatAstNodeLines(value, context);
                childLines[0] = childProp + ": " + childLines[0];
                propLines.push.apply(propLines, tslib_1.__spread(childLines));
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (childPropNames_1_1 && !childPropNames_1_1.done && (_e = childPropNames_1.return)) _e.call(childPropNames_1);
        }
        finally { if (e_3) throw e_3.error; }
    }
    var rangeStr = formatRange_1.default(node.start, node.end, context);
    return tslib_1.__spread([
        node.type + " " + rangeStr + " {"
    ], propLines.map(function (s) { return '  ' + s; }), [
        '}',
    ]);
    var e_1, _c, e_3, _e, e_2, _d;
}
