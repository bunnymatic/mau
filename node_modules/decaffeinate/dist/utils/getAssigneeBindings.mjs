import * as tslib_1 from "tslib";
/**
 * Determine the variables introduced by this assignee (array destructure,
 * object destructure, rest, etc.).
 */
import { ArrayInitialiser, AssignOp, Identifier, ObjectInitialiser, ObjectInitialiserMember, Rest, Spread } from 'decaffeinate-parser/dist/nodes';
export default function getAssigneeBindings(node) {
    if (node instanceof Identifier) {
        return [node.data];
    }
    else if (node instanceof ArrayInitialiser) {
        var bindings = [];
        try {
            for (var _a = tslib_1.__values(node.members), _b = _a.next(); !_b.done; _b = _a.next()) {
                var member = _b.value;
                bindings.push.apply(bindings, tslib_1.__spread(getAssigneeBindings(member)));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return bindings;
    }
    else if (node instanceof ObjectInitialiser) {
        var bindings = [];
        try {
            for (var _d = tslib_1.__values(node.members), _e = _d.next(); !_e.done; _e = _d.next()) {
                var member = _e.value;
                bindings.push.apply(bindings, tslib_1.__spread(getAssigneeBindings(member)));
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_f = _d.return)) _f.call(_d);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return bindings;
    }
    else if (node instanceof ObjectInitialiserMember) {
        return getAssigneeBindings(node.expression || node.key);
    }
    else if (node instanceof AssignOp) {
        return getAssigneeBindings(node.assignee);
    }
    else if (node instanceof Spread || node instanceof Rest) {
        return getAssigneeBindings(node.expression);
    }
    return [];
    var e_1, _c, e_2, _f;
}
