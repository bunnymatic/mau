/**
 * Represents a token at a particular index within a list of tokens.
 */
var SourceTokenListIndex = (function () {
    function SourceTokenListIndex(sourceTokenList, index) {
        this._sourceTokenList = sourceTokenList;
        this._index = index;
    }
    /**
     * Get a new index offset from this one, if the resulting offset is within
     * the list range.
     */
    SourceTokenListIndex.prototype.advance = function (offset) {
        var newIndex = this._index + offset;
        if (newIndex < 0 || this._sourceTokenList.length < newIndex) {
            return null;
        }
        return this._sourceTokenList['_getIndex'](newIndex);
    };
    /**
     * Get the index of the token after this one, if it's not the last one.
     */
    SourceTokenListIndex.prototype.next = function () {
        return this.advance(1);
    };
    /**
     * Get the index of the token before this one, if it's not the first one.
     */
    SourceTokenListIndex.prototype.previous = function () {
        return this.advance(-1);
    };
    /**
     * Determines whether this index comes before another.
     */
    SourceTokenListIndex.prototype.isBefore = function (other) {
        return this.compare(other) > 0;
    };
    /**
     * Determines whether this index comes after another.
     */
    SourceTokenListIndex.prototype.isAfter = function (other) {
        return this.compare(other) < 0;
    };
    /**
     * Compare this index to another, returning 0 for equality, a negative number
     * if this is less than `other`, and a positive number otherwise.
     */
    SourceTokenListIndex.prototype.compare = function (other) {
        return this.distance(other);
    };
    /**
     * Returns an int of the relative distance between this index and the other
     * index (positive if the other one is later, negative if the other one is
     * earlier).
     */
    SourceTokenListIndex.prototype.distance = function (other) {
        if (other._sourceTokenList !== this._sourceTokenList) {
            throw new Error('cannot compare indexes from different lists');
        }
        return other._index - this._index;
    };
    return SourceTokenListIndex;
}());
export default SourceTokenListIndex;
