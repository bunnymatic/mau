import SourceLocation from '../SourceLocation';
import SourceType from '../SourceType';
import BufferedStream from './BufferedStream';
/**
 * Helper class for defining the padding (characters to remove, typically
 * whitespace) in a string or heregexp. Also tracks "line separators", which are
 * newline characters in multiline single and double quoted strings that should
 * be turned into space characters.
 *
 * Example usage:
 *
 * let paddingTracker = new PaddingTracker(source, stream, SSTRING_END);
 *
 * // Examine underlying code to see what padding to add.
 * paddingTracker.fragments[0].content;
 *
 * // Mark padding for each fragment, indexed relative to the fragment content.
 * paddingTracker.fragments[0].markPadding(3, 5);
 * paddingTracker.fragments[1].markPadding(1, 4);
 * paddingTracker.fragments[1].markLineSeparator(5);
 *
 * // Compute the replacement source locations for the entire string/heregexp.
 * paddingTracker.computeSourceLocations();
 */
export default class PaddingTracker {
    readonly fragments: Array<TrackedFragment>;
    private _originalLocations;
    constructor(source: string, stream: BufferedStream, endType: SourceType);
    computeSourceLocations(): Array<SourceLocation>;
}
export declare type PaddingRange = {
    start: number;
    end: number;
};
export declare class TrackedFragment {
    content: string;
    start: number;
    end: number;
    index: number;
    _paddingRanges: Array<PaddingRange>;
    _lineSeparators: Array<number>;
    constructor(content: string, start: number, end: number, index: number);
    markPadding(startIndex: number, endIndex: number): void;
    markLineSeparator(index: number): void;
    computeSourceLocations(): Array<SourceLocation>;
}
