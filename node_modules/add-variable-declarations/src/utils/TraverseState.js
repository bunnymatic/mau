"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var getFirstStatementInBlock_1 = require("./getFirstStatementInBlock");
var buildDeclarationForNames_1 = require("./buildDeclarationForNames");
var getParenthesesRanges_1 = require("./getParenthesesRanges");
/**
 * The state of one proposed binding. As new usages are seen, the
 * mostSpecificScope field is updated accordingly.
 */
var BindingState = (function () {
    function BindingState(name, scope) {
        this.isInOriginalPosition = true;
        this.name = name;
        this.mostSpecificScope = scope;
    }
    BindingState.prototype.handleSeenScope = function (scope) {
        var newScopes = new Set();
        for (var newScope = scope; newScope; newScope = newScope.parent) {
            newScopes.add(newScope);
        }
        while (!newScopes.has(this.mostSpecificScope)) {
            this.mostSpecificScope = this.mostSpecificScope.parent;
            this.isInOriginalPosition = false;
        }
    };
    return BindingState;
}());
exports.BindingState = BindingState;
/**
 * Mutable structure containing the current declarations in the traversal. Each
 * TraverseState object corresponds to one scope in the source code (which could
 * be any block, not just a function scope), so the full set of TraverseState
 * objects forms a tree structure, but any any point in time, the current
 * TraverseState forms a path through all parent scopes.
 *
 * Even though every scope gets a TraverseState, only function scopes can
 * actually "own" bindings. This makes it easy to detect when two variables are
 * the same.
 */
var TraverseState = (function () {
    function TraverseState(scope, parentState) {
        if (parentState === void 0) { parentState = null; }
        this.ownedBindings = new Map();
        this.ownedInlineBindings = [];
        this.scope = scope;
        this.parentState = parentState;
    }
    /**
     * Declare that there is an assignment to a variable with this name in this
     * scope.
     */
    TraverseState.prototype.addBinding = function (name) {
        var searchResult = this.resolveName(name);
        if (searchResult === 'NOT_FOUND') {
            this.createBinding(name, this.scope);
        }
        else if (searchResult !== 'ALREADY_DECLARED') {
            searchResult.handleSeenScope(this.scope);
        }
    };
    /**
     * Note that this identifier appears in this scope. This won't create
     * bindings, but might update the most specific scope for existing bindings.
     */
    TraverseState.prototype.handleSeenIdentifier = function (name) {
        var searchResult = this.resolveName(name);
        if (searchResult !== 'NOT_FOUND' && searchResult !== 'ALREADY_DECLARED') {
            searchResult.handleSeenScope(this.scope);
        }
    };
    /**
     * Declare that, if possible, the given names should all have declarations
     * added by inserting `var` at the start of the specified node. If any of them
     * end up changing scopes due to later information, or if any of them are
     * already declared, we'll just add the names to the most specific scope.
     *
     * To make calling code simpler, this method allows an empty array of names
     * (in which case it's a no-op) and allows names that are already defined
     * (in which case we immediately know that we won't be able to do an inline
     * binding).
     */
    TraverseState.prototype.addInlineBinding = function (node, names, _a) {
        var _this = this;
        var shouldRemoveParens = _a.shouldRemoveParens;
        if (names.length === 0) {
            return;
        }
        // This is only eligible as an inline binding if every name is distinct and not yet taken.
        if (names.every(function (name) { return _this.resolveName(name) === 'NOT_FOUND'; }) && new Set(names).size === names.length) {
            var newBindings = names.map(function (name) { return _this.createBinding(name, _this.scope); });
            var bindingOwner = this.getEnclosingBindingOwner();
            bindingOwner.ownedInlineBindings.push({
                node: node,
                bindings: newBindings,
                shouldRemoveParens: shouldRemoveParens,
            });
        }
        else {
            try {
                for (var names_1 = __values(names), names_1_1 = names_1.next(); !names_1_1.done; names_1_1 = names_1.next()) {
                    var name = names_1_1.value;
                    this.addBinding(name);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (names_1_1 && !names_1_1.done && (_b = names_1.return)) _b.call(names_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        var e_1, _b;
    };
    TraverseState.prototype.createBinding = function (name, scope) {
        var bindingOwner = this.getEnclosingBindingOwner();
        if (bindingOwner.ownedBindings.has(name)) {
            throw new Error('Tried to create a binding for a name that is already taken.');
        }
        var newState = new BindingState(name, scope);
        bindingOwner.ownedBindings.set(name, newState);
        return newState;
    };
    TraverseState.prototype.getEnclosingBindingOwner = function () {
        if (this.canOwnBindings()) {
            return this;
        }
        else if (!this.parentState) {
            throw new Error("expected parent state but none was found!");
        }
        else {
            return this.parentState.getEnclosingBindingOwner();
        }
    };
    TraverseState.prototype.canOwnBindings = function () {
        if (!this.parentState) {
            return true;
        }
        switch (this.scope.block.type) {
            case 'FunctionDeclaration':
            case 'FunctionExpression':
            case 'ObjectMethod':
            case 'ClassMethod':
                return true;
            default:
                return false;
        }
    };
    TraverseState.prototype.resolveName = function (name) {
        if (this.scope.getBinding(name)) {
            return 'ALREADY_DECLARED';
        }
        var binding = this.ownedBindings.get(name);
        if (binding) {
            return binding;
        }
        if (this.parentState) {
            return this.parentState.resolveName(name);
        }
        else {
            return 'NOT_FOUND';
        }
    };
    /**
     * When we finish processing a function, we know that we have all information
     * we need for variables scoped to this function, so we can insert the `var`
     * declarations at the right places.
     */
    TraverseState.prototype.commitDeclarations = function (editor, source, tokens) {
        var usedNames = new Set();
        // Defer `var` insertions so that magic-string will insert things in the
        // right order.
        var varInsertionPoints = [];
        try {
            for (var _a = __values(this.ownedInlineBindings), _b = _a.next(); !_b.done; _b = _a.next()) {
                var inlineBinding = _b.value;
                if (inlineBinding.bindings.every(function (binding) { return binding.isInOriginalPosition; })) {
                    var node = inlineBinding.node, shouldRemoveParens = inlineBinding.shouldRemoveParens;
                    if (shouldRemoveParens) {
                        try {
                            for (var _c = __values(getParenthesesRanges_1.default(node, tokens)), _d = _c.next(); !_d.done; _d = _c.next()) {
                                var _e = _d.value, start = _e.start, end = _e.end;
                                editor.remove(start, end);
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_d && !_d.done && (_f = _c.return)) _f.call(_c);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                    varInsertionPoints.push(node.start);
                    try {
                        for (var _g = __values(inlineBinding.bindings), _h = _g.next(); !_h.done; _h = _g.next()) {
                            var binding = _h.value;
                            usedNames.add(binding.name);
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (_h && !_h.done && (_j = _g.return)) _j.call(_g);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_k = _a.return)) _k.call(_a);
            }
            finally { if (e_4) throw e_4.error; }
        }
        try {
            for (var _l = __values(this.getBindingNamesByScope(usedNames).entries()), _m = _l.next(); !_m.done; _m = _l.next()) {
                var _o = __read(_m.value, 2), scope = _o[0], names = _o[1];
                var firstStatement = this.getFirstStatementForScope(scope);
                if (firstStatement) {
                    editor.appendLeft(firstStatement.start, buildDeclarationForNames_1.default(names, source, firstStatement.start));
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_m && !_m.done && (_p = _l.return)) _p.call(_l);
            }
            finally { if (e_5) throw e_5.error; }
        }
        try {
            for (var varInsertionPoints_1 = __values(varInsertionPoints), varInsertionPoints_1_1 = varInsertionPoints_1.next(); !varInsertionPoints_1_1.done; varInsertionPoints_1_1 = varInsertionPoints_1.next()) {
                var insertionPoint = varInsertionPoints_1_1.value;
                editor.appendLeft(insertionPoint, 'var ');
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (varInsertionPoints_1_1 && !varInsertionPoints_1_1.done && (_q = varInsertionPoints_1.return)) _q.call(varInsertionPoints_1);
            }
            finally { if (e_6) throw e_6.error; }
        }
        var e_4, _k, e_2, _f, e_3, _j, e_5, _p, e_6, _q;
    };
    /**
     * Get all names that we still need to declare (ones not in usedNames), sorted
     * and grouped by scope.
     */
    TraverseState.prototype.getBindingNamesByScope = function (usedNames) {
        var bindingNamesByScope = new Map();
        try {
            for (var _a = __values(this.ownedBindings.values()), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = _b.value, name = _c.name, mostSpecificScope = _c.mostSpecificScope;
                if (usedNames.has(name)) {
                    continue;
                }
                var names = bindingNamesByScope.get(mostSpecificScope);
                if (names) {
                    names.push(name);
                }
                else {
                    bindingNamesByScope.set(mostSpecificScope, [name]);
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_7) throw e_7.error; }
        }
        try {
            for (var _e = __values(bindingNamesByScope.values()), _f = _e.next(); !_f.done; _f = _e.next()) {
                var names = _f.value;
                names.sort();
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_g = _e.return)) _g.call(_e);
            }
            finally { if (e_8) throw e_8.error; }
        }
        return bindingNamesByScope;
        var e_7, _d, e_8, _g;
    };
    TraverseState.prototype.getFirstStatementForScope = function (scope) {
        var firstStatement;
        var insertionScope = scope;
        do {
            firstStatement = getFirstStatementInBlock_1.default(insertionScope.block);
            insertionScope = insertionScope.parent;
        } while (!firstStatement);
        return firstStatement;
    };
    return TraverseState;
}());
exports.default = TraverseState;
//# sourceMappingURL=TraverseState.js.map