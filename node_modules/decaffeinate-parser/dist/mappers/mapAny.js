"use strict";
exports.__esModule = true;
var nodes_1 = require("decaffeinate-coffeescript/lib/coffee-script/nodes");
var UnsupportedNodeError_1 = require("../util/UnsupportedNodeError");
var mapArr_1 = require("./mapArr");
var mapAssign_1 = require("./mapAssign");
var mapBlock_1 = require("./mapBlock");
var mapBool_1 = require("./mapBool");
var mapCall_1 = require("./mapCall");
var mapClass_1 = require("./mapClass");
var mapCode_1 = require("./mapCode");
var mapExistence_1 = require("./mapExistence");
var mapExpansion_1 = require("./mapExpansion");
var mapExtends_1 = require("./mapExtends");
var mapFor_1 = require("./mapFor");
var mapIf_1 = require("./mapIf");
var mapIn_1 = require("./mapIn");
var mapLiteral_1 = require("./mapLiteral");
var mapNull_1 = require("./mapNull");
var mapObj_1 = require("./mapObj");
var mapOp_1 = require("./mapOp");
var mapParam_1 = require("./mapParam");
var mapParens_1 = require("./mapParens");
var mapRange_1 = require("./mapRange");
var mapReturn_1 = require("./mapReturn");
var mapSplat_1 = require("./mapSplat");
var mapSwitch_1 = require("./mapSwitch");
var mapThrow_1 = require("./mapThrow");
var mapTry_1 = require("./mapTry");
var mapUndefined_1 = require("./mapUndefined");
var mapValue_1 = require("./mapValue");
var mapWhile_1 = require("./mapWhile");
function mapAny(context, node) {
    if (node instanceof nodes_1.Value) {
        return mapValue_1["default"](context, node);
    }
    if (node instanceof nodes_1.Literal) {
        return mapLiteral_1["default"](context, node);
    }
    if (node instanceof nodes_1.Op) {
        return mapOp_1["default"](context, node);
    }
    if (node instanceof nodes_1.Call) {
        return mapCall_1["default"](context, node);
    }
    if (node instanceof nodes_1.Arr) {
        return mapArr_1["default"](context, node);
    }
    if (node instanceof nodes_1.Bool) {
        return mapBool_1["default"](context, node);
    }
    if (node instanceof nodes_1.Assign) {
        return mapAssign_1["default"](context, node);
    }
    if (node instanceof nodes_1.Param) {
        return mapParam_1["default"](context, node);
    }
    if (node instanceof nodes_1.Return) {
        return mapReturn_1["default"](context, node);
    }
    if (node instanceof nodes_1.If) {
        return mapIf_1["default"](context, node);
    }
    if (node instanceof nodes_1.Null) {
        return mapNull_1["default"](context, node);
    }
    if (node instanceof nodes_1.Obj) {
        return mapObj_1["default"](context, node);
    }
    if (node instanceof nodes_1.Parens) {
        return mapParens_1["default"](context, node);
    }
    if (node instanceof nodes_1.For) {
        return mapFor_1["default"](context, node);
    }
    if (node instanceof nodes_1.Throw) {
        return mapThrow_1["default"](context, node);
    }
    if (node instanceof nodes_1.Undefined) {
        return mapUndefined_1["default"](context, node);
    }
    if (node instanceof nodes_1.Block) {
        return mapBlock_1["default"](context, node);
    }
    if (node instanceof nodes_1.Code) {
        return mapCode_1["default"](context, node);
    }
    if (node instanceof nodes_1.While && !(node instanceof nodes_1.For)) {
        return mapWhile_1["default"](context, node);
    }
    if (node instanceof nodes_1.Try) {
        return mapTry_1["default"](context, node);
    }
    if (node instanceof nodes_1.Existence) {
        return mapExistence_1["default"](context, node);
    }
    if (node instanceof nodes_1.Class) {
        return mapClass_1["default"](context, node);
    }
    if (node instanceof nodes_1.Splat) {
        return mapSplat_1["default"](context, node);
    }
    if (node instanceof nodes_1.Expansion) {
        return mapExpansion_1["default"](context, node);
    }
    if (node instanceof nodes_1.Switch) {
        return mapSwitch_1["default"](context, node);
    }
    if (node instanceof nodes_1.In) {
        return mapIn_1["default"](context, node);
    }
    if (node instanceof nodes_1.Range) {
        return mapRange_1["default"](context, node);
    }
    if (node instanceof nodes_1.Extends) {
        return mapExtends_1["default"](context, node);
    }
    if (node instanceof nodes_1.Comment) {
        throw new UnsupportedNodeError_1["default"](node, 'Expected comment notes to be filtered out by mapBlock rather than processed directly.');
    }
    throw new UnsupportedNodeError_1["default"](node);
}
exports["default"] = mapAny;
