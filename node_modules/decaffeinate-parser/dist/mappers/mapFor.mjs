import { ForIn, ForOf } from '../nodes';
import getLocation from '../util/getLocation';
import mapAny from './mapAny';
import mapPossiblyEmptyBlock from './mapPossiblyEmptyBlock';
export default function mapFor(context, node) {
    var _a = getLocation(context, node), line = _a.line, column = _a.column, start = _a.start, end = _a.end, raw = _a.raw;
    var keyAssignee = node.index ? mapAny(context, node.index) : null;
    var valAssignee = node.name ? mapAny(context, node.name) : null;
    var body = mapPossiblyEmptyBlock(context, node.body);
    var target = mapAny(context, node.source);
    var filter = node.guard ? mapAny(context, node.guard) : null;
    if (body && body.start < target.start) {
        body = body.withInline(true);
    }
    if (node.object) {
        var isOwn = node.own;
        return new ForOf(line, column, start, end, raw, keyAssignee, valAssignee, target, filter, body, isOwn);
    }
    else {
        var step = node.step ? mapAny(context, node.step) : null;
        return new ForIn(line, column, start, end, raw, keyAssignee, valAssignee, target, filter, body, step);
    }
}
