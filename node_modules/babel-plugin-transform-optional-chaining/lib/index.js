"use strict";

exports.__esModule = true;

exports.default = function (_ref) {
  var t = _ref.types;

  function optional(path, replacementPath) {
    var loose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var scope = path.scope;

    var optionals = [];
    var nil = scope.buildUndefinedNode();

    var objectPath = path;
    while (objectPath.isMemberExpression() || objectPath.isCallExpression() || objectPath.isNewExpression()) {
      var _objectPath = objectPath,
          node = _objectPath.node;

      if (node.optional) {
        optionals.push(node);
      }

      if (objectPath.isMemberExpression()) {
        objectPath = objectPath.get("object");
      } else {
        objectPath = objectPath.get("callee");
      }
    }

    for (var i = optionals.length - 1; i >= 0; i--) {
      var _node = optionals[i];
      _node.optional = false;

      var isCall = t.isCallExpression(_node);
      var replaceKey = isCall || t.isNewExpression(_node) ? "callee" : "object";
      var chain = _node[replaceKey];

      var ref = void 0;
      var check = void 0;
      if (loose && isCall) {
        check = ref = chain;
      } else {
        ref = scope.maybeGenerateMemoised(chain);
        if (ref) {
          check = t.assignmentExpression("=", ref, chain);
          _node[replaceKey] = ref;
        } else {
          check = ref = chain;
        }
      }

      if (isCall && t.isMemberExpression(chain)) {
        if (loose) {
          _node.callee = chain;
        } else {
          var object = chain.object;

          var context = scope.maybeGenerateMemoised(object);
          if (context) {
            chain.object = t.assignmentExpression("=", context, object);
          } else {
            context = object;
          }

          _node.arguments.unshift(context);
          _node.callee = t.memberExpression(_node.callee, t.identifier("call"));
        }
      }

      replacementPath.replaceWith(t.conditionalExpression(t.binaryExpression("==", check, t.nullLiteral()), nil, replacementPath.node));

      replacementPath = replacementPath.get("alternate");
    }
  }

  function findReplacementPath(path) {
    return path.find(function (path) {
      var parentPath = path.parentPath;


      if (path.key == "left" && parentPath.isAssignmentExpression()) {
        return false;
      }
      if (path.key == "object" && parentPath.isMemberExpression()) {
        return false;
      }
      if (path.key == "callee" && (parentPath.isCallExpression() || parentPath.isNewExpression())) {
        return false;
      }
      if (path.key == "argument" && parentPath.isUpdateExpression()) {
        return false;
      }
      if (path.key == "argument" && parentPath.isUnaryExpression({ operator: "delete" })) {
        return false;
      }

      return true;
    });
  }

  return {
    inherits: _babelPluginSyntaxOptionalChaining2.default,

    visitor: {
      "MemberExpression|NewExpression|CallExpression": function MemberExpressionNewExpressionCallExpression(path) {
        if (!path.node.optional) {
          return;
        }

        optional(path, findReplacementPath(path), this.opts.loose);
      }
    }
  };
};

var _babelPluginSyntaxOptionalChaining = require("babel-plugin-syntax-optional-chaining");

var _babelPluginSyntaxOptionalChaining2 = _interopRequireDefault(_babelPluginSyntaxOptionalChaining);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }