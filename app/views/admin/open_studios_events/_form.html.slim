/ locals os_event
.pure-g
  .pure-u-1-1.padded-content.js-open-studios-event-editor.admin-open-studios-event-form
    = semantic_form_for [:admin, os_event], multipart: true do |f|
      = render partial: 'common/form_errors', locals: { form: f }
      = f.inputs do
        = f.input :title, placeholder: 'e.g. Spring Open Studios'
        .pure-g
          .pure-u-1-2
            = f.input :start_date, as: :date_picker, placeholder: 'yyyy-mm-dd', input_html: { value: os_event.start_date.try(:to_fs,:admin_date_only) }
          .pure-u-1-2
            = f.input :end_date, as: :date_picker, placeholder: 'yyyy-mm-dd', input_html: { value: os_event.end_date.try(:to_fs,:admin_date_only) }
        .pure-g
          .pure-u-1-2
            = f.input :start_time, as: :string, placeholder: 'choose a time', hint: "Something like 12noon or noon or 11a.  This is used for display only (not for date/time math)"
          .pure-u-1-2
            = f.input :end_time, as: :string, placeholder: 'choose a time', hint: "Something like 6p.  This is used for display only (not for date/time math)"
        .pure-g
          .pure-u-1-2
            = f.input :activated_at, as: :date_picker, placeholder: 'choose a date', hint: "This date is when we'll start shown Open Studios stuff in the navigation, highlights on peoples profiles etc.", input_html: { value: os_event.activated_at.try(:to_fs,:admin_date_only) }
          .pure-u-1-2
            = f.input :deactivated_at, as: :date_picker, placeholder: 'choose a date', hint: "This date is when we'll stop showing Open Studios links and stuff.", input_html: { value: os_event.deactivated_at.try(:to_fs,:admin_date_only) }
        = f.input :key, placeholder: 'e.g. YYYYMM'
        = f.input :promote, as: :boolean, inline_label: true, label: false, hint: "If true, we'll remind artists in navigation to register when we're near (in time) this event."

        .pure-g
          .pure-u-1-1.admin-open-studios-event-form__subsection__header
            h3 Optional Special Event Times
        .pure-g
          .pure-u-1-2
            = f.input :special_event_start_date, as: :date_picker, placeholder: 'yyyy-mm-dd', input_html: { value: os_event.special_event_start_date.try(:to_fs,:admin_date_only) }
          .pure-u-1-2
            = f.input :special_event_end_date, as: :date_picker, placeholder: 'yyyy-mm-dd', input_html: { value: os_event.special_event_end_date.try(:to_fs,:admin_date_only) }
        .pure-g
          .pure-u-1-2
            = f.input :special_event_start_time, as: :string, placeholder: 'hh:mm {am|pm}', hint: "We will use (and validate) these as time strings in the 12hr time format e.g. '1:00pm',  '9:45 am'"
          .pure-u-1-2
            = f.input :special_event_end_time, as: :string, placeholder: 'hh:mm {am|pm}', hint: "We will use (and validate) these as time strings in the 12hr time format e.g. '1:00pm',  '9:45 am'"
        .pure-g
          .pure-u-1-2
            = f.input :banner_image, as: :file, hint: "Recommend 2.6 aspect ratio (~13/5 portrait) and a width of at least 1000 pixels"
          .pure-u-1-2
            - if os_event.banner_image.present? && os_event.banner_image.url
              .admin-open-studios-event-form__banner-image-wrapper
                img src=os_event.banner_image.url
      = f.actions do
        .form-controls
          = f.submit class: 'pure-button pure-button-primary'
          = link_to 'Cancel', admin_open_studios_events_path, class: 'pure-button'

javascript:
  document.addEventListener("DOMContentLoaded", function() {
    new MAU.OsKeyGenerator(".js-open-studios-event-editor form");
  });
