@import 'gto/variables';
@import 'colors';
@import 'dimensions';

@mixin background-cover {
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center;
}
@mixin background-contain {
  background-repeat: no-repeat;
  background-size: contain;
  background-position: center;
}

@mixin transparent_black_background {
  background-color: $black;
  background-color: rgba(10,10,10, 0.8);
}

@mixin transparent_blue_background {
  background-color: $darkbluegray;
  background-color: rgba(60,40,100, 0.4);
}

@mixin transparent_white_background {
  background-color: $xlightgray;
  background-color: rgba(240,240,240,0.7);
}

@mixin dotted_border {
  border: 1px dotted $bordergray;
}
@mixin solid_border {
  border: 1px solid $bordergray;
}
@mixin input_style {
  border: 1px solid $lightbluegray;
  background-color: $xlightgray;
  padding: 4px;
}
@mixin link_style {
  text-decoration: none;
  color: $lightyellow;
  &:link {
    color: $lightyellow;
  }

  &:visited {
    color: $lightyellow;
  }
  &:hover {
    color: #554444;
  }
  &:active {
    color: $lightyellow;
  }
}

@mixin little-text {
  font-size: x-small;
}


$default_rounded_amount: 4px;

@mixin opacity($opacity) {
  filter: unquote("progid:DXImageTransform.Microsoft.Alpha(Opacity=#{round($opacity * 100)})");
  opacity: $opacity;
}

// Round corner at position by amount.
@mixin round-corner($position, $amount: $default_rounded_amount) {
  border-#{$position}-radius: $amount;
  -webkit-border-#{$position}-radius: $amount;
}

@mixin round-corner-mozilla($position, $amount: $default_rounded_amount) {
  -moz-border-radius-#{$position}: $amount;
}

// Round left corners by amount
@mixin round-left-corners($amount: $default_rounded_amount) {
  @include round-corner("top-left", $amount);
  @include round-corner("bottom-left", $amount);
  @include round-corner-mozilla("topleft", $amount);
  @include round-corner-mozilla("bottomleft", $amount);
}

// Round right corners by amount
@mixin round-right-corners($amount: $default_rounded_amount) {
  @include round-corner("top-right", $amount);
  @include round-corner("bottom-right", $amount);
  @include round-corner-mozilla("topright", $amount);
  @include round-corner-mozilla("bottomright", $amount);
}
// Round top corners by amount
@mixin round-top-corners($amount: 5px) {
  @include round-corner("top-left", $amount);
  @include round-corner("top-right", $amount);
  @include round-corner-mozilla("topleft", $amount);
  @include round-corner-mozilla("topright", $amount);
}

// Round bottom corners by amount
@mixin round-bottom-corners($amount: $default_rounded_amount) {
  @include round-corner("bottom-left", $amount);
  @include round-corner("bottom-right", $amount);
  @include round-corner-mozilla("bottomleft", $amount);
  @include round-corner-mozilla("bottomright", $amount);
}
// Round all corners by amount
@mixin round-corners($amount: $default_rounded_amount) {
  border-radius: $amount;
  -moz-border-radius: $amount;
  -webkit-border-radius: $amount;
}

@mixin small-rounded-bottom-corners {
  @include round-bottom-corners;
}
@mixin small-rounded-top-corners {
  @include round-bottom-corners;
}

@mixin small-rounded-corners {
  @include round-corners;
}
@mixin large-rounded-corners {
  @include round-corners($amount: 7px);
}

@mixin floating-window-border {
  border: 1px solid $bordergray;
  box-shadow: 4px 4px 8px rgba(40,40,40, 0.80);
  -moz-box-shadow: 4px 4px 8px rgba(40,40,40, 0.80);
  -webkit-box-shadow: 4px 4px 8px rgba(40,40,40, 0.80);
}

@mixin box-shadow($shadow) {
  -webkit-box-shadow: $shadow;
  -moz-box-shadow: $shadow;
  box-shadow: $shadow;
}
@mixin transition($trans) {
  -webkit-transition: $trans;
  -moz-transition: $trans;
  -o-transition: $trans;
  transition: $trans;
}

@mixin transition-property($transition-property...) {
  -webkit-transition-property: $transition-property;
          transition-property: $transition-property;
}
@mixin transition-delay($transition-delay) {
  -webkit-transition-delay: $transition-delay;
          transition-delay: $transition-delay;
}
@mixin transition-duration($transition-duration...) {
  -webkit-transition-duration: $transition-duration;
          transition-duration: $transition-duration;
}
@mixin transition-timing-function($timing-function) {
  -webkit-transition-timing-function: $timing-function;
          transition-timing-function: $timing-function;
}
@mixin transition-transform($transition...) {
  -webkit-transition: -webkit-transform $transition;
     -moz-transition: -moz-transform $transition;
       -o-transition: -o-transform $transition;
          transition: transform $transition;
}
@mixin transform($transform...) {
  -moz-transform: $transform;
  -webkit-transform: $transform;
  -o-transform: $transform;
  transform: $transform;
}
@mixin transform-origin($origin...) {
  -webkit-transform-origin: $origin;
  -moz-transform-origin: $origin;
  -o-transform-origin: $origin;
  transform-origin: $origin;
}

@mixin bottom-label-overlay {
  z-index: 0;
  position: absolute;
  bottom: 0px;
  left: 0;
  width: 100%;
  background-color: rgba(255,255,255,0.9);
  color: #222;
}

@mixin blur($radius: 5px) {
 -webkit-filter: blur($radius);
  -moz-filter: blur($radius);
  -o-filter: blur($radius);
  -ms-filter: blur($radius);
  filter: blur($radius);
}

@mixin ellipsis {
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}

@mixin sidebar-nav-entry {
  min-height: 28px;
  line-height: 28px;
  overflow: hidden;
  @include ellipsis;
}

@mixin make-xs-offset($columns, $grid-columns) {
  margin-left: percentage(($columns / $grid-columns));
}
@mixin make-xs-push($columns, $grid-columns) {
  left: percentage(($columns / $grid-columns));
}
@mixin make-xs-pull($columns, $grid-columns) {
  right: percentage(($columns / $grid-columns));
}

@mixin make-sm-offset($columns, $grid-columns) {
  @media (min-width: $screen-sm-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-push($columns, $grid-columns) {
  @media (min-width: $screen-sm-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-pull($columns, $grid-columns) {
  @media (min-width: $screen-sm-min) {
    right: percentage(($columns / $grid-columns));
  }
}

@mixin make-md-offset($columns, $grid-columns) {
  @media (min-width: $screen-md-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-push($columns, $grid-columns) {
  @media (min-width: $screen-md-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-pull($columns, $grid-columns) {
  @media (min-width: $screen-md-min) {
    right: percentage(($columns / $grid-columns));
  }
}

@mixin make-lg-offset($columns, $grid-columns) {
  @media (min-width: $screen-lg-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-push($columns, $grid-columns) {
  @media (min-width: $screen-lg-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-pull($columns, $grid-columns) {
  @media (min-width: $screen-lg-min) {
    right: percentage(($columns / $grid-columns));
  }
}

/* Test if `$value` is a valid direction
 * @param {*} $value - Value to test
 * @return {Bool}
 */
@function is-direction($value) {
  $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-keyword or $is-angle;
};

@mixin linear-gradient($direction, $color-stops...) {
  /* Direction has been omitted and happens to be a color-stop */
  @if is-direction($direction) == false {
    $color-stops: $direction, $color-stops;
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient($direction, $color-stops);
  background: linear-gradient($direction, $color-stops);
};
