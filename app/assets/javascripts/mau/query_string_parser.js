// Generated by CoffeeScript 1.12.7
(function() {
  MAU = window.MAU = window.MAU || {};

  MAU.QueryStringParserHelpers = {
    hashToQueryString: function(hash) {
      return _
        .compact(
          _.map(hash, function(v, k) {
            if (typeof v !== "undefined" && v !== null) {
              return [k, v].join("=");
            }
          })
        )
        .join("&");
    },
    queryStringToHash: function(query) {
      return _.reduce(
        query.split("&"),
        function(memo, params) {
          var kv;
          kv = params.split("=");
          memo[kv[0]] = kv[1];
          return memo;
        },
        {}
      );
    }
  };

  MAU.QueryStringParser =
    MAU.QueryStringParser ||
    (function() {
      var util;

      util = MAU.QueryStringParserHelpers;

      function QueryStringParser(url) {
        var parser, queryString;
        this.query_params = {};
        if (!document || !document.createElement) {
          throw "This needs to be run in an HTML context with a document.";
        }
        parser = document.createElement("a");
        parser.href = url;
        this.url = url;
        if (parser.origin) {
          this.origin = parser.origin;
        } else {
          this.origin = [parser.protocol, "//", parser.host].join("");
        }
        this.protocol = parser.protocol;
        this.pathname = parser.pathname;
        this.hash = parser.hash;
        queryString = parser.search.substr(1);
        this.query_params = util.queryStringToHash(queryString);
      }

      QueryStringParser.prototype.toString = function() {
        var bits, q;
        q = util.hashToQueryString(this.query_params);
        bits = [this.origin, this.pathname].join("");
        if (q) {
          bits += "?" + q;
        }
        if (this.hash) {
          bits += this.hash;
        }
        return bits;
      };

      return QueryStringParser;
    })();
}.call(this));
