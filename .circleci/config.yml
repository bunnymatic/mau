version: 2.1
executors:
  ruby_node:
    docker:
      - image: cimg/ruby:3.2.3-browsers
  ruby_node_mysql_elasticsearch:
    docker:
      - image: cimg/ruby:3.2.3-browsers
      - image: cimg/mysql:5.8
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_ROOT_PASSWORD: ""
          MYSQL_DATABASE: mau_test
      - image: docker.elastic.co/elasticsearch/elasticsearch:6.2.2
        environment:
          TEST_CLUSTER_NODES: 1
          discovery.type: single-node

commands:
  vips_install:
    description: Install Vips
    steps:
      - run:
          shell: /bin/bash
          name: Install libvips
          command: |-
            sudo apt update
            sudo apt install libvips
  bundle_install:
    description: Bundle Install (and cache)
    steps:
      - run:
          shell: /bin/bash
          name: "Set bundler path to vendor/bundle"
          command: |-
            bundle config set --local path vendor/bundle
      - restore_cache:
          keys:
            - mau-bundler-cache-v3-{{arch}}-{{ checksum ".ruby-version" }}-{{
              checksum "Gemfile.lock" }}
            - mau-bundler-cache-v3-{{arch}}-{{ checksum ".ruby-version" }}
            - mau-bundler-cache-v3-
      - run:
          shell: /bin/bash
          name: Bundle Install and Audit
          command: |-
            bundle check || bundle install
            bundle exec bundle-audit update && bundle exec bundle-audit check
            bundle clean --force
      - save_cache:
          key: mau-bundler-cache-v3-{{ arch }}-{{ checksum ".ruby-version" }}-{{ checksum
            "Gemfile.lock" }}
          paths:
            - vendor/bundle
  npm_install:
    description: Yarn install (and cache)
    steps:
      - restore_cache:
          keys:
            - mau-npm-cache-v3-{{ arch }}-{{ checksum ".ruby-version" }}-{{
              checksum "yarn.lock"}}
            - mau-npm-cache-v3-{{ arch }}-{{ checksum ".ruby-version" }}
            - mau-npm-cache-v3-
      - run:
          shell: /bin/bash
          name: Yarn Install
          command: |-
            yarn install
      - save_cache:
          key: mau-npm-cache-v3-{{ arch }}-{{ checksum ".ruby-version" }}-{{ checksum
            "yarn.lock" }}
          paths:
            - node_modules
  chrome_install:
    description: Install Chrome
    steps:
      - run:
          name: Setup Chrome
          command: |
            wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
            sudo apt install ./google-chrome-stable_current_amd64.deb
  compile_assets:
    description: Compile assets
    steps:
      - restore_cache:
          keys:
            - mau-asset-cache-v1-{{ arch }}-{{ .Branch }}
            - mau-asset-cache-v1-

      - run: bundle exec rake assets:precompile

      - save_cache:
          key: mau-asset-cache-v1-{{ arch }}-{{ .Branch }}-{{ epoch }}
          paths:
            - public/assets
  use_assets_cache:
    description: Use assets cache
    steps:
      - restore_cache:
          keys:
            - mau-asset-cache-v1-{{ arch }}-{{ .Branch }}
            - mau-asset-cache-v1-

      - run: echo Hopefully the assets cache is available!
  install_mysql_client:
    steps:
      - run:
          shell: /bin/bash
          name: Machine Setup
          command: |-
            sudo apt install -y default-mysql-client
jobs:
  prepare:
    environment:
      DISABLE_SPRING: true
      RAILS_ENV: test
      RACK_ENV: test
      CI: true
      TEST_CLUSTER_PORT: 9200
    executor: ruby_node
    steps:
      - checkout
      - bundle_install
      - npm_install
      - compile_assets

  lint_and_javascript_specs:
    environment:
      DISABLE_SPRING: true
      RAILS_ENV: test
      RACK_ENV: test
      CI: true
      TEST_CLUSTER_PORT: 9200
    executor: ruby_node
    steps:
      - checkout
      - bundle_install
      - npm_install
      - run:
          shell: /bin/bash
          name: Rubocop
          command: |-
            bundle exec rubocop
      - run:
          shell: /bin/bash
          name: JS Lint
          command: |-
            bundle exec rake js:lint
      - run:
          name: JS Tests
          command: |-
            bundle exec rake spec:javascripts
  spec:
    parallelism: 2
    environment:
      DISABLE_SPRING: true
      RAILS_ENV: test
      RACK_ENV: test
      CI: true
      TEST_CLUSTER_PORT: 9200
    executor: ruby_node_mysql_elasticsearch
    steps:
      - checkout
      - vips_install
      - bundle_install
      - npm_install
      - run:
          shell: /bin/bash
          name: Wait For DB
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 120s
      - run:
          shell: /bin/bash
          name: DB Setup
          command: |-
            bundle exec rake db:schema:load db:seed
      - run:
          name: Ruby Tests (rspec)
          command: |-
            bundle exec rspec --format doc --format RspecJunitFormatter --out test-results/rspec/results.xml \
            $(circleci tests glob "spec/**/*spec.rb" | circleci tests split --split-by=timings)
      - store_artifacts:
          path: ./tmp/capybara
      - store_artifacts:
          path: ./test-results/rspec
      - store_test_results:
          path: ./test-results/rspec
    # The resource_class feature allows configuring CPU and RAM resources for each job. Different resource classes are available for different executors. https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large
  cucumber:
    parallelism: 2
    environment:
      DISABLE_SPRING: true
      RAILS_ENV: test
      RACK_ENV: test
      CI: true
      TEST_CLUSTER_PORT: 9200
    executor: ruby_node_mysql_elasticsearch

    steps:
      - checkout
      - vips_install
      - bundle_install
      - npm_install
      - use_assets_cache
      - chrome_install
      - run:
          shell: /bin/bash
          name: Wait For DB
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 120s
      - run:
          shell: /bin/bash
          name: DB Setup
          command: |-
            bundle exec rake db:schema:load db:seed
      - run:
          name: Webdrivers update
          command: RAILS_ENV=test bundle exec rake webdrivers:chromedriver:update
      - run:
          name: Cucumber
          command: |-
            bundle exec cucumber --format junit --out test-results/cucumber/results.xml \
            $(circleci tests glob "features/**/*.feature" | circleci tests split --split-by=timings)
      - store_artifacts:
          path: ./tmp/capybara
      - store_artifacts:
          path: ./test-results/cucumber
      - store_test_results:
          path: ./test-results/cucumber
    # The resource_class feature allows configuring CPU and RAM resources for each job. Different resource classes are available for different executors. https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large

workflows:
  version: 2.1
  build_and_test:
    jobs:
      - prepare
      - lint_and_javascript_specs:
          requires:
            - prepare
      - spec:
          requires:
            - prepare
      - cucumber:
          requires:
            - prepare
